<%
    # try and set these properties from a BOSH 2.0 spec object
    job_name = spec.job.name
    instance_id = spec.id
    instance_zone = p("metron_agent.zone", spec.az)

    if job_name.nil?
      job_name = name
    end

    if instance_id.nil?
      instance_id = spec.index.to_s
    end

    incoming_udp_port = nil
    if_p("metron_agent.listening_port") do |port|
      incoming_udp_port = port
    end

    # We're not expecting `metron_agent.dropsonde_incoming_port` to have been set
    # but prefer this deprecated value if set
    if_p("metron_agent.dropsonde_incoming_port") do |port|
      incoming_udp_port = port
    end

    grpcConfig = {
        "Port" => p("metron_agent.grpc_port"),
        "KeyFile" => "/var/vcap/jobs/metron_agent_windows/config/certs/metron_agent.key",
        "CertFile" => "/var/vcap/jobs/metron_agent_windows/config/certs/metron_agent.crt",
        "CAFile" => "/var/vcap/jobs/metron_agent_windows/config/certs/loggregator_ca.crt"
    }

    args = Hash.new.tap do |a|
        a[:Index] = instance_id
        a[:Job] = job_name
        a[:Zone] = instance_zone
        a[:Deployment] = spec.deployment
        a[:SharedSecret] = p("metron_endpoint.shared_secret")
        a[:IncomingUDPPort] = incoming_udp_port
        a[:DisableUDP] = p("metron_agent.disable_udp")
        a[:PPROFPort] = p("metron_agent.pprof_port")
        a[:GRPC] = grpcConfig
        a[:DopplerAddr] = "#{p('doppler.addr')}:#{p('doppler.grpc_port')}"
        a[:DopplerAddrUDP] = "#{p('doppler.addr')}:#{p('doppler.udp_port')}"
        if_p("syslog_daemon_config") do |_|
            a[:Syslog] = "vcap.metron_agent"
        end
    end
%>

<%= JSON.pretty_generate(args) %>
