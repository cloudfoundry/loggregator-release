<%
    # try and set these properties from a BOSH 2.0 spec object
    job_name = spec.job.name
    instance_id = spec.id

    if job_name.nil?
      job_name = name
    end

    if instance_id.nil?
      instance_id = spec.index
    end

    # Handle renamed properties
    uaaClient = p("loggregator.uaa.client")
    oldUaaClient = p("loggregator.uaa_client_id")
    unless oldUaaClient.empty?
        uaaClient = oldUaaClient
    end

    uaaSecret = p("loggregator.uaa.client_secret")
    if uaaSecret.empty?
        uaaSecret = p("uaa.clients.doppler.secret")
    end

    etcdMachines = p("loggregator.etcd.machines").map{|addr| "#{p('loggregator.etcd.require_ssl') ? 'https' : 'http'}://#{addr}:4001"}

    etcdTLSClientConfig = {
        "KeyFile" => "/var/vcap/jobs/loggregator_trafficcontroller/config/certs/etcd-client.key",
        "CertFile" => "/var/vcap/jobs/loggregator_trafficcontroller/config/certs/etcd-client.crt",
        "CAFile" => "/var/vcap/jobs/loggregator_trafficcontroller/config/certs/etcd-ca.crt"
    }

    scheme = p("login.protocol")
    domain = p("system_domain")
    uaaHost = p("uaa.url", "#{scheme}://uaa.#{domain}")

    args = Hash.new.tap do |a|
        a[:JobName] = job_name
        a[:Index] = instance_id
        a[:EtcdUrls] = etcdMachines
        a[:EtcdMaxConcurrentRequests] = p("loggregator.etcd.maxconcurrentrequests")
        a[:EtcdRequireTLS] = p("loggregator.etcd.require_ssl")
        if_p("loggregator.etcd.require_ssl") do |_|
            a[:EtcdTLSClientConfig] = etcdTLSClientConfig
        end
        a[:OutgoingDropsondePort] = p("loggregator.outgoing_dropsonde_port")
        a[:DopplerPort] = p("doppler.outgoing_port")
        a[:SkipCertVerify] = p("ssl.skip_cert_verify")
        a[:ApiHost] = p("cc.srv_api_uri")
        a[:SystemDomain] = p("system_domain")
        a[:MetronPort] = p("metron_endpoint.dropsonde_port")
        a[:PPROFPort] = p("traffic_controller.pprof_port")
        a[:UaaHost] = uaaHost
        a[:UaaClient] = uaaClient
        a[:UaaClientSecret] = uaaSecret
        if_p("syslog_daemon_config") do |_|
            a[:Syslog] = "vcap.trafficcontroller"
        end
        if p("traffic_controller.security_event_logging.enabled")
            a[:SecurityEventLog] = "/var/vcap/sys/log/loggregator_trafficcontroller/loggregator_trafficcontroller_security_events.log"
        end
    end
%>

<%= JSON.pretty_generate(args) %>
