<%
    # try and set these properties from a BOSH 2.0 spec object
    job_name = spec.job.name
    instance_id = spec.id
    instance_zone = spec.az

    if job_name.nil?
      job_name = name
    end

    if instance_id.nil?
      instance_id = spec.index
    end

    if instance_zone.nil?
      instance_zone = p("doppler.zone")
    end

    etcdMachines = p("loggregator.etcd.machines").map{|addr| "#{p('loggregator.etcd.require_ssl') ? 'https' : 'http'}://#{addr}:4001"}
    etcdTLSClientConfig = {
        "KeyFile" => "/var/vcap/jobs/doppler/config/certs/etcd-client.key",
        "CertFile" => "/var/vcap/jobs/doppler/config/certs/etcd-client.crt",
        "CAFile" => "/var/vcap/jobs/doppler/config/certs/etcd-ca.crt"
    }
    tlsListenerConfig = {
        "Port" => p("doppler.tls.port"),
        "KeyFile" => "/var/vcap/jobs/doppler/config/certs/doppler.key",
        "CertFile" => "/var/vcap/jobs/doppler/config/certs/doppler.crt",
        "CAFile" => "/var/vcap/jobs/doppler/config/certs/loggregator_ca.crt"
    }

    args = Hash.new.tap do |a|
        a[:EtcdUrls] = etcdMachines
        a[:EtcdMaxConcurrentRequests] = 10
        a[:EtcdRequireTLS] = p("loggregator.etcd.require_ssl")
        if_p("loggregator.etcd.require_ssl") do |_|
            a[:EtcdTLSClientConfig] = etcdTLSClientConfig
        end
        a[:MessageDrainBufferSize] = p("doppler.message_drain_buffer_size")
        a[:IncomingUDPPort] = p("doppler.dropsonde_incoming_port")
        a[:IncomingTCPPort] = p("doppler.incoming_tcp_port")
        if_p("doppler.tls.enable") do |_|
            a[:TLSListenerConfig] = tlsListenerConfig
        end
        a[:OutgoingPort] = p("doppler.outgoing_port")
        a[:GRPCPort] = p("doppler.grpc_port")
        a[:Zone] = instance_zone
        a[:JobName] = job_name
        a[:Index] = instance_id
        a[:MaxRetainedLogMessages] = p("doppler.maxRetainedLogMessages")
        a[:SharedSecret] = p("doppler_endpoint.shared_secret")
        a[:ContainerMetricTTLSeconds] = p("doppler.container_metric_ttl_seconds")
        a[:SinkSkipCertVerify] = p("doppler.syslog_skip_cert_verify")
        a[:SinkInactivityTimeoutSeconds] = p("doppler.sink_inactivity_timeout_seconds")
        a[:SinkDialTimeoutSeconds] = p("doppler.sink_dial_timeout_seconds")
        a[:WebsocketWriteTimeoutSeconds] = p("doppler.websocket_write_timeout_seconds")
        a[:SinkIOTimeoutSeconds] = p("doppler.sink_io_timeout_seconds")
        a[:UnmarshallerCount] = p("doppler.unmarshaller_count")
        a[:PPROFPort] = p("doppler.pprof_port")
        a[:EnableTLSTransport] = p("doppler.tls.enable")
        a[:MetronAddress] = p('metron_endpoint.host').to_s + ":" + p('metron_endpoint.dropsonde_port').to_s
        if_p("syslog_daemon_config") do |_|
            a[:Syslog] = "vcap.doppler"
        end
        if_p("doppler.blacklisted_syslog_ranges") do |prop|
            a[:BlackListIPs] = prop
        end
    end
%>

<%= JSON.pretty_generate(args) %>
