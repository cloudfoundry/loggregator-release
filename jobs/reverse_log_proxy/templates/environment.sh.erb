export RUN_DIR="/var/vcap/sys/run/reverse_log_proxy"
export LOG_DIR="/var/vcap/sys/log/reverse_log_proxy"
export PIDFILE="${RUN_DIR}/reverse_log_proxy.pid"
export JOB_DIR="/var/vcap/jobs/reverse_log_proxy"
export CERT_DIR="$JOB_DIR/config/certs"
export PACKAGE_DIR="/var/vcap/packages/reverse_log_proxy"
export PACKAGE_EXECUTABLE="rlp"
export PROFILE_EXECUTABLE="/var/vcap/packages/profiler/profiler.sh"

<%
    ingress_addrs = []
    if_link("doppler") { |ds|
        ingress_addrs = ds.instances.map do |instance|
            "#{instance.address}:#{ds.p('doppler.grpc_port')}"
        end
    }.else {
        ingress_addrs = p('loggregator.doppler.addrs').map do |addr|
            "#{addr}:#{p('loggregator.doppler.grpc_port')}"
        end
    }
%>

export RLP_PORT="<%= p('reverse_log_proxy.egress.port') %>"
export MAX_EGRESS_STREAMS="<%= p('reverse_log_proxy.egress.max_streams') %>"
export RLP_CERT_FILE="$CERT_DIR/reverse_log_proxy.crt"
export RLP_KEY_FILE="$CERT_DIR/reverse_log_proxy.key"
export RLP_CA_FILE="$CERT_DIR/mutual_tls_ca.crt"
export RLP_CIPHER_SUITES="<%= p('loggregator.tls.cipher_suites').gsub(":", ",") %>"
export RLP_PPROF_PORT="<%= p('reverse_log_proxy.pprof.port') %>"
export RLP_HEALTH_ADDR="<%= p('reverse_log_proxy.health_addr') %>"
export RLP_METRIC_EMITTER_INTERVAL="<%= p('metric_emitter.interval') %>"

export ROUTER_ADDRS="<%= ingress_addrs.join(",") %>"
export AGENT_ADDR="<%= "#{p('metron_endpoint.host')}:#{p('metron_endpoint.grpc_port')}" %>"
