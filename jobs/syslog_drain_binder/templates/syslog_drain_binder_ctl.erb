#!/bin/bash -e

<%
    lockedMem = p("syslog_drain_binder.locked_memory_limit")
    if (!lockedMem.is_a? Numeric) && (!["kernel", "soft", "hard", "unlimited"].include? lockedMem) then
        raise lockedMem + ": invalid locked_memory_limit"
    end
%>

RUN_DIR=/var/vcap/sys/run/syslog_drain_binder
LOG_DIR=/var/vcap/sys/log/syslog_drain_binder
PIDFILE=$RUN_DIR/syslog_drain_binder.pid

mkdir -p $RUN_DIR
mkdir -p $LOG_DIR

source /var/vcap/packages/loggregator_common/pid_utils.sh
source /var/vcap/packages/loggregator_common/syslog_utils.sh

tee_output_to_sys_log "$LOG_DIR"

case $1 in

  start)
    pid_guard $PIDFILE "Syslog Drain Binder"

    <% if p("syslog_drain_binder.locked_memory_limit") != "kernel" %>
    ulimit -l <%= p("syslog_drain_binder.locked_memory_limit") %>
    <% end %>
    ulimit -n 65536

    <% p("syslog_drain_binder.debug") == true ? debug_string = "--debug " : debug_string = "" %>

    <% if p('syslog_drain_binder.log_to_syslog') %>
    tee_output_to_sys_log "$LOG_DIR" syslog_drain_binder stdout stderr
    <% else %>
    exec >>$LOG_DIR/syslog_drain_binder.stdout.log \
         2>>$LOG_DIR/syslog_drain_binder.stderr.log
    <% end %>

    chown -R vcap:vcap $LOG_DIR

    chpst -u vcap:vcap /var/vcap/packages/syslog_drain_binder/syslog_drain_binder <%= debug_string %> \
         --config /var/vcap/jobs/syslog_drain_binder/config/syslog_drain_binder.json &

    echo $! > $PIDFILE

    ;;

  stop)
    kill_and_wait $PIDFILE 40

    ;;

  *)
    echo "Usage: syslog_drain_binder {start|stop}"

    ;;

esac
