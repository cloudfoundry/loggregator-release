$ModLoad imuxsock                       # local message reception (rsyslog uses a datagram socket)
$MaxMessageSize <%= p("syslog_daemon_config.max_message_size") %> # default is 2k
$WorkDirectory /var/vcap/sys/rsyslog/buffered # where messages should be buffered on disk

# Forward vcap messages to the aggregator
#
$ActionResumeRetryCount -1              # Try until the server becomes available
$ActionQueueType LinkedList             # Allocate on-demand
$ActionQueueFileName agg_backlog        # Spill to disk if queue is full
$ActionQueueMaxDiskSpace 32m            # Max size for disk queue
$ActionQueueLowWaterMark 2000           # Num messages. Assuming avg size of 512B, this is 1MiB.
$ActionQueueHighWaterMark 8000          # Num messages. Assuming avg size of 512B, this is 4MiB. (If this is reached, messages will spill to disk until the low watermark is reached).
$ActionQueueTimeoutEnqueue 0            # Discard messages if the queue + disk is full
$ActionQueueSaveOnShutdown on           # Save in-memory data to disk if rsyslog shuts down

# Listen for logs over UDP
#
$ModLoad imudp
$UDPServerAddress 127.0.0.1
$UDPServerRun 514


<%
   def rendered_action_parameters
      return p("syslog_daemon_config.rsyslog_action_parameters").map{|k,v| "#{k}=\"#{v}\""}.join(' ')
   end

   def discover_external_ip
     networks = spec.networks.marshal_dump
     _, network = networks.find do |_name, network_spec|
       network_spec.default
     end
     if !network
       _, network = networks.first
     end
     if !network
       raise "Could not determine IP via network spec: #{networks}"
     end
     network.ip
   end
   ip = discover_external_ip
%>

template(name="CfLogTemplate" type="list") {
        constant(value="<")
        property(name="pri")
        constant(value=">")
        property(name="timestamp" dateFormat="rfc3339")
        <% if !ip.nil? %>
          constant(value=" <%= ip.strip %> ")
        <% else %>
          constant(value=" ")
          property(name="fromhost-ip")
          constant(value=" ")
        <% end %>
        property(name="programname")
        constant(value=" [job=<%= name %> index=<%= spec.index.to_i %>] ")
        property(name="msg")
}

<%= p('syslog_daemon_config.custom_rule') %>

<% if_p("syslog_daemon_config.address", "syslog_daemon_config.port", "syslog_daemon_config.transport") do |address, port, transport| %>
<% if transport == "relp" %>
$ModLoad omrelp
action(type="omrelp"
       target="<%= address %>"
       port="<%= port %>"
       template="CfLogTemplate"
       <%= rendered_action_parameters() %>)
<% elsif transport == "udp" %>
action(type="omfwd"
       Protocol="udp"
       Target="<%= address %>"
       Port="<%= port %>"
       template="CfLogTemplate"
       <%= rendered_action_parameters() %>)
<% elsif transport == "tcp" %>
action(type="omfwd"
       Protocol="tcp"
       Target="<%= address %>"
       Port="<%= port %>"
       template="CfLogTemplate"
       <%= rendered_action_parameters() %>)
<% else %>
#only RELP, UDP, and TCP are supported
<% end %>

<% end  %>

<% if p("syslog_daemon_config.fallback_addresses").length > 0 %>
$ActionExecOnlyWhenPreviousIsSuspended on
<% p("syslog_daemon_config.fallback_addresses", []).each do |fallback_address| %>
<%
   transport = fallback_address["transport"]
   address = fallback_address["address"]
   port = fallback_address["port"]
%>
<% if transport == "relp" %>
action(type="omrelp"
       target="<%= address %>"
       port="<%= port %>"
       template="CfLogTemplate"
       <%= rendered_action_parameters() %>)
<% elsif transport == "tcp" %>
action(type="omfwd"
       Protocol="tcp"
       Target="<%= address %>"
       Port="<%= port %>"
       template="CfLogTemplate"
       <%= rendered_action_parameters() %>)
<% else %>
# only RELP and TCP are supported
<% end %>
<% end %>
$ActionExecOnlyWhenPreviousIsSuspended off
<% end %>

# Log vcap messages locally, too
#$template VcapComponentLogFile, "/var/log/%programname:6:$%/%programname:6:$%.log"
#$template VcapComponentLogFormat, "%timegenerated% %syslogseverity-text% -- %msg%\n"
#:programname, startswith, "vcap." -?VcapComponentLogFile;VcapComponentLogFormat

# Prevent them from reaching anywhere else
:programname, startswith, "vcap." ~
