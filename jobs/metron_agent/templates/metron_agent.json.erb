<%
    # try and set these properties from a BOSH 2.0 spec object
    job_name = spec.job.name || name
    instance_id = spec.id || spec.index.to_s
    instance_zone = p("metron_agent.zone").empty? ? spec.az : p("metron_agent.zone")
    deployment = p("metron_agent.deployment").empty? ? spec.deployment : p("metron_agent.deployment")

    grpcConfig = {
        "Port" => p("metron_agent.grpc_port"),
        "KeyFile" => "/var/vcap/jobs/metron_agent/config/certs/metron_agent.key",
        "CertFile" => "/var/vcap/jobs/metron_agent/config/certs/metron_agent.crt",
        "CAFile" => "/var/vcap/jobs/metron_agent/config/certs/loggregator_ca.crt"
    }

    tags = {
        deployment: deployment,
        job: job_name,
        index: instance_id,
        ip: spec.ip,
    }
    tags.merge!(p("metron_agent.tags"))

    args = Hash.new.tap do |a|
        a[:Index] = instance_id
        a[:Job] = job_name
        a[:Zone] = instance_zone
        a[:Deployment] = deployment
        a[:IP] = spec.ip
        a[:Tags] = tags
        if_p("metron_endpoint.shared_secret") do |_|
          a[:SharedSecret] = p("metron_endpoint.shared_secret")
        end.else do
          a[:SharedSecret] = link("doppler").p("doppler_endpoint.shared_secret")
        end
        a[:IncomingUDPPort] = p("metron_agent.listening_port")
        a[:DisableUDP] = p("metron_agent.disable_udp")
        a[:PPROFPort] = p("metron_agent.pprof_port")
        a[:GRPC] = grpcConfig
        a[:DopplerAddr] = "#{p('doppler.addr')}:#{p('doppler.grpc_port')}"
        a[:DopplerAddrUDP] = "#{p('doppler.addr')}:#{p('doppler.udp_port')}"
    end
%>

<%= JSON.pretty_generate(args) %>
