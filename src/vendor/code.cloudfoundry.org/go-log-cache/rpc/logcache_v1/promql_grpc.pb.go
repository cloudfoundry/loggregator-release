// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: api/v1/promql.proto

package logcache_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PromQLQuerierClient is the client API for PromQLQuerier service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PromQLQuerierClient interface {
	InstantQuery(ctx context.Context, in *PromQL_InstantQueryRequest, opts ...grpc.CallOption) (*PromQL_InstantQueryResult, error)
	RangeQuery(ctx context.Context, in *PromQL_RangeQueryRequest, opts ...grpc.CallOption) (*PromQL_RangeQueryResult, error)
}

type promQLQuerierClient struct {
	cc grpc.ClientConnInterface
}

func NewPromQLQuerierClient(cc grpc.ClientConnInterface) PromQLQuerierClient {
	return &promQLQuerierClient{cc}
}

func (c *promQLQuerierClient) InstantQuery(ctx context.Context, in *PromQL_InstantQueryRequest, opts ...grpc.CallOption) (*PromQL_InstantQueryResult, error) {
	out := new(PromQL_InstantQueryResult)
	err := c.cc.Invoke(ctx, "/logcache.v1.PromQLQuerier/InstantQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promQLQuerierClient) RangeQuery(ctx context.Context, in *PromQL_RangeQueryRequest, opts ...grpc.CallOption) (*PromQL_RangeQueryResult, error) {
	out := new(PromQL_RangeQueryResult)
	err := c.cc.Invoke(ctx, "/logcache.v1.PromQLQuerier/RangeQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PromQLQuerierServer is the server API for PromQLQuerier service.
// All implementations must embed UnimplementedPromQLQuerierServer
// for forward compatibility
type PromQLQuerierServer interface {
	InstantQuery(context.Context, *PromQL_InstantQueryRequest) (*PromQL_InstantQueryResult, error)
	RangeQuery(context.Context, *PromQL_RangeQueryRequest) (*PromQL_RangeQueryResult, error)
	mustEmbedUnimplementedPromQLQuerierServer()
}

// UnimplementedPromQLQuerierServer must be embedded to have forward compatible implementations.
type UnimplementedPromQLQuerierServer struct {
}

func (UnimplementedPromQLQuerierServer) InstantQuery(context.Context, *PromQL_InstantQueryRequest) (*PromQL_InstantQueryResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstantQuery not implemented")
}
func (UnimplementedPromQLQuerierServer) RangeQuery(context.Context, *PromQL_RangeQueryRequest) (*PromQL_RangeQueryResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RangeQuery not implemented")
}
func (UnimplementedPromQLQuerierServer) mustEmbedUnimplementedPromQLQuerierServer() {}

// UnsafePromQLQuerierServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PromQLQuerierServer will
// result in compilation errors.
type UnsafePromQLQuerierServer interface {
	mustEmbedUnimplementedPromQLQuerierServer()
}

func RegisterPromQLQuerierServer(s grpc.ServiceRegistrar, srv PromQLQuerierServer) {
	s.RegisterService(&PromQLQuerier_ServiceDesc, srv)
}

func _PromQLQuerier_InstantQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PromQL_InstantQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromQLQuerierServer).InstantQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logcache.v1.PromQLQuerier/InstantQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromQLQuerierServer).InstantQuery(ctx, req.(*PromQL_InstantQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PromQLQuerier_RangeQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PromQL_RangeQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromQLQuerierServer).RangeQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logcache.v1.PromQLQuerier/RangeQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromQLQuerierServer).RangeQuery(ctx, req.(*PromQL_RangeQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PromQLQuerier_ServiceDesc is the grpc.ServiceDesc for PromQLQuerier service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PromQLQuerier_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logcache.v1.PromQLQuerier",
	HandlerType: (*PromQLQuerierServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InstantQuery",
			Handler:    _PromQLQuerier_InstantQuery_Handler,
		},
		{
			MethodName: "RangeQuery",
			Handler:    _PromQLQuerier_RangeQuery_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/promql.proto",
}
