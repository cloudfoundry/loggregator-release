// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: loggregator-api/v2/egress.proto

package loggregator_v2

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EgressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// shard_id instructs Loggregator to shard envelopes between other
	// subscriptions with the same shard_id. Loggregator will do its best to
	// split the load evenly between subscriptions with the same shard_id
	// (unless deterministic_name is set).
	ShardId string `protobuf:"bytes,1,opt,name=shard_id,json=shardId,proto3" json:"shard_id,omitempty"`
	// deterministic_name is used to enable deterministic routing. This implies
	// that gauges and counters are routed based on name. If this is excluded,
	// then they are routed to split load evenly.
	DeterministicName string `protobuf:"bytes,5,opt,name=deterministic_name,json=deterministicName,proto3" json:"deterministic_name,omitempty"`
	// TODO: This can be removed once selector has been around long enough.
	LegacySelector *Selector `protobuf:"bytes,2,opt,name=legacy_selector,json=legacySelector,proto3" json:"legacy_selector,omitempty"`
	// selector is the preferred (over legacy_selector) mechanism to select
	// what envelope types the subscription wants. If there are no selectors
	// given, no data will be sent.
	Selectors []*Selector `protobuf:"bytes,4,rep,name=selectors,proto3" json:"selectors,omitempty"`
	// TODO: This can be removed once the envelope.deprecated_tags is removed.
	UsePreferredTags bool `protobuf:"varint,3,opt,name=use_preferred_tags,json=usePreferredTags,proto3" json:"use_preferred_tags,omitempty"`
}

func (x *EgressRequest) Reset() {
	*x = EgressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_loggregator_api_v2_egress_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EgressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EgressRequest) ProtoMessage() {}

func (x *EgressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_loggregator_api_v2_egress_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EgressRequest.ProtoReflect.Descriptor instead.
func (*EgressRequest) Descriptor() ([]byte, []int) {
	return file_loggregator_api_v2_egress_proto_rawDescGZIP(), []int{0}
}

func (x *EgressRequest) GetShardId() string {
	if x != nil {
		return x.ShardId
	}
	return ""
}

func (x *EgressRequest) GetDeterministicName() string {
	if x != nil {
		return x.DeterministicName
	}
	return ""
}

func (x *EgressRequest) GetLegacySelector() *Selector {
	if x != nil {
		return x.LegacySelector
	}
	return nil
}

func (x *EgressRequest) GetSelectors() []*Selector {
	if x != nil {
		return x.Selectors
	}
	return nil
}

func (x *EgressRequest) GetUsePreferredTags() bool {
	if x != nil {
		return x.UsePreferredTags
	}
	return false
}

type EgressBatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// shard_id instructs Loggregator to shard envelopes between other
	// subscriptions with the same shard_id. Loggregator will do its best to
	// split the load evenly between subscriptions with the same shard_id
	// (unless deterministic_name is set).
	ShardId string `protobuf:"bytes,1,opt,name=shard_id,json=shardId,proto3" json:"shard_id,omitempty"`
	// deterministic_name is used to enable deterministic routing. This implies
	// that gauges and counters are routed based on name. If this is excluded,
	// then they are routed to split load evenly.
	DeterministicName string `protobuf:"bytes,5,opt,name=deterministic_name,json=deterministicName,proto3" json:"deterministic_name,omitempty"`
	// TODO: This can be removed once selector has been around long enough.
	LegacySelector *Selector `protobuf:"bytes,2,opt,name=legacy_selector,json=legacySelector,proto3" json:"legacy_selector,omitempty"`
	// selector is the preferred (over legacy_selector) mechanism to select
	// what envelope types the subscription wants. If there are no selectors
	// given, no data will be sent.
	Selectors []*Selector `protobuf:"bytes,4,rep,name=selectors,proto3" json:"selectors,omitempty"`
	// TODO: This can be removed once the envelope.deprecated_tags is removed.
	UsePreferredTags bool `protobuf:"varint,3,opt,name=use_preferred_tags,json=usePreferredTags,proto3" json:"use_preferred_tags,omitempty"`
}

func (x *EgressBatchRequest) Reset() {
	*x = EgressBatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_loggregator_api_v2_egress_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EgressBatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EgressBatchRequest) ProtoMessage() {}

func (x *EgressBatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_loggregator_api_v2_egress_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EgressBatchRequest.ProtoReflect.Descriptor instead.
func (*EgressBatchRequest) Descriptor() ([]byte, []int) {
	return file_loggregator_api_v2_egress_proto_rawDescGZIP(), []int{1}
}

func (x *EgressBatchRequest) GetShardId() string {
	if x != nil {
		return x.ShardId
	}
	return ""
}

func (x *EgressBatchRequest) GetDeterministicName() string {
	if x != nil {
		return x.DeterministicName
	}
	return ""
}

func (x *EgressBatchRequest) GetLegacySelector() *Selector {
	if x != nil {
		return x.LegacySelector
	}
	return nil
}

func (x *EgressBatchRequest) GetSelectors() []*Selector {
	if x != nil {
		return x.Selectors
	}
	return nil
}

func (x *EgressBatchRequest) GetUsePreferredTags() bool {
	if x != nil {
		return x.UsePreferredTags
	}
	return false
}

// Selector instructs Loggregator to only send envelopes that match the given
// criteria.
type Selector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceId string `protobuf:"bytes,1,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	// Types that are assignable to Message:
	//
	//	*Selector_Log
	//	*Selector_Counter
	//	*Selector_Gauge
	//	*Selector_Timer
	//	*Selector_Event
	Message isSelector_Message `protobuf_oneof:"Message"`
}

func (x *Selector) Reset() {
	*x = Selector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_loggregator_api_v2_egress_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Selector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Selector) ProtoMessage() {}

func (x *Selector) ProtoReflect() protoreflect.Message {
	mi := &file_loggregator_api_v2_egress_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Selector.ProtoReflect.Descriptor instead.
func (*Selector) Descriptor() ([]byte, []int) {
	return file_loggregator_api_v2_egress_proto_rawDescGZIP(), []int{2}
}

func (x *Selector) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

func (m *Selector) GetMessage() isSelector_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *Selector) GetLog() *LogSelector {
	if x, ok := x.GetMessage().(*Selector_Log); ok {
		return x.Log
	}
	return nil
}

func (x *Selector) GetCounter() *CounterSelector {
	if x, ok := x.GetMessage().(*Selector_Counter); ok {
		return x.Counter
	}
	return nil
}

func (x *Selector) GetGauge() *GaugeSelector {
	if x, ok := x.GetMessage().(*Selector_Gauge); ok {
		return x.Gauge
	}
	return nil
}

func (x *Selector) GetTimer() *TimerSelector {
	if x, ok := x.GetMessage().(*Selector_Timer); ok {
		return x.Timer
	}
	return nil
}

func (x *Selector) GetEvent() *EventSelector {
	if x, ok := x.GetMessage().(*Selector_Event); ok {
		return x.Event
	}
	return nil
}

type isSelector_Message interface {
	isSelector_Message()
}

type Selector_Log struct {
	Log *LogSelector `protobuf:"bytes,2,opt,name=log,proto3,oneof"`
}

type Selector_Counter struct {
	Counter *CounterSelector `protobuf:"bytes,3,opt,name=counter,proto3,oneof"`
}

type Selector_Gauge struct {
	Gauge *GaugeSelector `protobuf:"bytes,4,opt,name=gauge,proto3,oneof"`
}

type Selector_Timer struct {
	Timer *TimerSelector `protobuf:"bytes,5,opt,name=timer,proto3,oneof"`
}

type Selector_Event struct {
	Event *EventSelector `protobuf:"bytes,6,opt,name=event,proto3,oneof"`
}

func (*Selector_Log) isSelector_Message() {}

func (*Selector_Counter) isSelector_Message() {}

func (*Selector_Gauge) isSelector_Message() {}

func (*Selector_Timer) isSelector_Message() {}

func (*Selector_Event) isSelector_Message() {}

// LogSelector instructs Loggregator to egress Log envelopes to the given
// subscription.
type LogSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LogSelector) Reset() {
	*x = LogSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_loggregator_api_v2_egress_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogSelector) ProtoMessage() {}

func (x *LogSelector) ProtoReflect() protoreflect.Message {
	mi := &file_loggregator_api_v2_egress_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogSelector.ProtoReflect.Descriptor instead.
func (*LogSelector) Descriptor() ([]byte, []int) {
	return file_loggregator_api_v2_egress_proto_rawDescGZIP(), []int{3}
}

// GaugeSelector instructs Loggregator to egress Gauge envelopes to the
// given subscription.
type GaugeSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Any egress Gauge envelope must consist of the given names.
	Names []string `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
}

func (x *GaugeSelector) Reset() {
	*x = GaugeSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_loggregator_api_v2_egress_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GaugeSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GaugeSelector) ProtoMessage() {}

func (x *GaugeSelector) ProtoReflect() protoreflect.Message {
	mi := &file_loggregator_api_v2_egress_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GaugeSelector.ProtoReflect.Descriptor instead.
func (*GaugeSelector) Descriptor() ([]byte, []int) {
	return file_loggregator_api_v2_egress_proto_rawDescGZIP(), []int{4}
}

func (x *GaugeSelector) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

// CounterSelector instructs Loggregator to egress Counter envelopes to the
// given subscription
type CounterSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Any egress Counter envelope must have the given name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *CounterSelector) Reset() {
	*x = CounterSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_loggregator_api_v2_egress_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CounterSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CounterSelector) ProtoMessage() {}

func (x *CounterSelector) ProtoReflect() protoreflect.Message {
	mi := &file_loggregator_api_v2_egress_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CounterSelector.ProtoReflect.Descriptor instead.
func (*CounterSelector) Descriptor() ([]byte, []int) {
	return file_loggregator_api_v2_egress_proto_rawDescGZIP(), []int{5}
}

func (x *CounterSelector) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// TimerSelector instructs Loggregator to egress Timer envelopes to the given
// subscription.
type TimerSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TimerSelector) Reset() {
	*x = TimerSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_loggregator_api_v2_egress_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimerSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimerSelector) ProtoMessage() {}

func (x *TimerSelector) ProtoReflect() protoreflect.Message {
	mi := &file_loggregator_api_v2_egress_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimerSelector.ProtoReflect.Descriptor instead.
func (*TimerSelector) Descriptor() ([]byte, []int) {
	return file_loggregator_api_v2_egress_proto_rawDescGZIP(), []int{6}
}

// EventSelector instructs Loggregator to egress Event envelopes to the given
// subscription.
type EventSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EventSelector) Reset() {
	*x = EventSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_loggregator_api_v2_egress_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventSelector) ProtoMessage() {}

func (x *EventSelector) ProtoReflect() protoreflect.Message {
	mi := &file_loggregator_api_v2_egress_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventSelector.ProtoReflect.Descriptor instead.
func (*EventSelector) Descriptor() ([]byte, []int) {
	return file_loggregator_api_v2_egress_proto_rawDescGZIP(), []int{7}
}

var File_loggregator_api_v2_egress_proto protoreflect.FileDescriptor

var file_loggregator_api_v2_egress_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x6c, 0x6f, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2d, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x32, 0x2f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0e, 0x6c, 0x6f, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76,
	0x32, 0x1a, 0x21, 0x6c, 0x6f, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2d, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x82, 0x02, 0x0a, 0x0d, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49,
	0x64, 0x12, 0x2d, 0x0a, 0x12, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64,
	0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x41, 0x0a, 0x0f, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x6f, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x0e, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x36, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x75,
	0x73, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x75, 0x73, 0x65, 0x50, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x22, 0x87, 0x02, 0x0a, 0x12, 0x45, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x64,
	0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x69, 0x73, 0x74, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0f, 0x6c, 0x65,
	0x67, 0x61, 0x63, 0x79, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0e, 0x6c,
	0x65, 0x67, 0x61, 0x63, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x36, 0x0a,
	0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76,
	0x32, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x75, 0x73, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x54,
	0x61, 0x67, 0x73, 0x22, 0xc5, 0x02, 0x0a, 0x08, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2f, 0x0a,
	0x03, 0x6c, 0x6f, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x6f, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x4c, 0x6f, 0x67, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x12, 0x3b,
	0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x32,
	0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x05, 0x67,
	0x61, 0x75, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x6f, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x61, 0x75, 0x67,
	0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x67, 0x61, 0x75,
	0x67, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x76, 0x32, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x48, 0x00, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x42, 0x09, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x0d, 0x0a, 0x0b, 0x4c,
	0x6f, 0x67, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x25, 0x0a, 0x0d, 0x47, 0x61,
	0x75, 0x67, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x22, 0x25, 0x0a, 0x0f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x0f, 0x0a, 0x0d, 0x54, 0x69, 0x6d, 0x65,
	0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x0f, 0x0a, 0x0d, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0xab, 0x01, 0x0a, 0x06, 0x45,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x47, 0x0a, 0x08, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x12, 0x1d, 0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x76, 0x32, 0x2e, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x18, 0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76,
	0x32, 0x2e, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x58,
	0x0a, 0x0f, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x12, 0x22, 0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x76, 0x32, 0x2e, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x22, 0x00, 0x30, 0x01, 0x42, 0x70, 0x0a, 0x1f, 0x6f, 0x72, 0x67, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x72, 0x79, 0x2e, 0x6c, 0x6f, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x32, 0x42, 0x11, 0x4c, 0x6f, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5a, 0x3a,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x72,
	0x79, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x67, 0x6f, 0x2d, 0x6c, 0x6f, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x6f, 0x72, 0x2f, 0x76, 0x39, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x6c, 0x6f, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x76, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_loggregator_api_v2_egress_proto_rawDescOnce sync.Once
	file_loggregator_api_v2_egress_proto_rawDescData = file_loggregator_api_v2_egress_proto_rawDesc
)

func file_loggregator_api_v2_egress_proto_rawDescGZIP() []byte {
	file_loggregator_api_v2_egress_proto_rawDescOnce.Do(func() {
		file_loggregator_api_v2_egress_proto_rawDescData = protoimpl.X.CompressGZIP(file_loggregator_api_v2_egress_proto_rawDescData)
	})
	return file_loggregator_api_v2_egress_proto_rawDescData
}

var file_loggregator_api_v2_egress_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_loggregator_api_v2_egress_proto_goTypes = []interface{}{
	(*EgressRequest)(nil),      // 0: loggregator.v2.EgressRequest
	(*EgressBatchRequest)(nil), // 1: loggregator.v2.EgressBatchRequest
	(*Selector)(nil),           // 2: loggregator.v2.Selector
	(*LogSelector)(nil),        // 3: loggregator.v2.LogSelector
	(*GaugeSelector)(nil),      // 4: loggregator.v2.GaugeSelector
	(*CounterSelector)(nil),    // 5: loggregator.v2.CounterSelector
	(*TimerSelector)(nil),      // 6: loggregator.v2.TimerSelector
	(*EventSelector)(nil),      // 7: loggregator.v2.EventSelector
	(*Envelope)(nil),           // 8: loggregator.v2.Envelope
	(*EnvelopeBatch)(nil),      // 9: loggregator.v2.EnvelopeBatch
}
var file_loggregator_api_v2_egress_proto_depIdxs = []int32{
	2,  // 0: loggregator.v2.EgressRequest.legacy_selector:type_name -> loggregator.v2.Selector
	2,  // 1: loggregator.v2.EgressRequest.selectors:type_name -> loggregator.v2.Selector
	2,  // 2: loggregator.v2.EgressBatchRequest.legacy_selector:type_name -> loggregator.v2.Selector
	2,  // 3: loggregator.v2.EgressBatchRequest.selectors:type_name -> loggregator.v2.Selector
	3,  // 4: loggregator.v2.Selector.log:type_name -> loggregator.v2.LogSelector
	5,  // 5: loggregator.v2.Selector.counter:type_name -> loggregator.v2.CounterSelector
	4,  // 6: loggregator.v2.Selector.gauge:type_name -> loggregator.v2.GaugeSelector
	6,  // 7: loggregator.v2.Selector.timer:type_name -> loggregator.v2.TimerSelector
	7,  // 8: loggregator.v2.Selector.event:type_name -> loggregator.v2.EventSelector
	0,  // 9: loggregator.v2.Egress.Receiver:input_type -> loggregator.v2.EgressRequest
	1,  // 10: loggregator.v2.Egress.BatchedReceiver:input_type -> loggregator.v2.EgressBatchRequest
	8,  // 11: loggregator.v2.Egress.Receiver:output_type -> loggregator.v2.Envelope
	9,  // 12: loggregator.v2.Egress.BatchedReceiver:output_type -> loggregator.v2.EnvelopeBatch
	11, // [11:13] is the sub-list for method output_type
	9,  // [9:11] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_loggregator_api_v2_egress_proto_init() }
func file_loggregator_api_v2_egress_proto_init() {
	if File_loggregator_api_v2_egress_proto != nil {
		return
	}
	file_loggregator_api_v2_envelope_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_loggregator_api_v2_egress_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EgressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_loggregator_api_v2_egress_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EgressBatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_loggregator_api_v2_egress_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Selector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_loggregator_api_v2_egress_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_loggregator_api_v2_egress_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GaugeSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_loggregator_api_v2_egress_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CounterSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_loggregator_api_v2_egress_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimerSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_loggregator_api_v2_egress_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_loggregator_api_v2_egress_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Selector_Log)(nil),
		(*Selector_Counter)(nil),
		(*Selector_Gauge)(nil),
		(*Selector_Timer)(nil),
		(*Selector_Event)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_loggregator_api_v2_egress_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_loggregator_api_v2_egress_proto_goTypes,
		DependencyIndexes: file_loggregator_api_v2_egress_proto_depIdxs,
		MessageInfos:      file_loggregator_api_v2_egress_proto_msgTypes,
	}.Build()
	File_loggregator_api_v2_egress_proto = out.File
	file_loggregator_api_v2_egress_proto_rawDesc = nil
	file_loggregator_api_v2_egress_proto_goTypes = nil
	file_loggregator_api_v2_egress_proto_depIdxs = nil
}
