// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.12
// source: dropsonde-protocol/events/metric.proto

package events

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A ValueMetric indicates the value of a metric at an instant in time.
type ValueMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the metric. Must be consistent for downstream consumers to
	// associate events semantically.
	Name *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	// Value at the time of event emission.
	Value *float64 `protobuf:"fixed64,2,req,name=value" json:"value,omitempty"`
	// Unit of the metric. Please see http://metrics20.org/spec/#units for
	// ideas; SI units/prefixes are recommended where applicable. Should be
	// consistent for the life of the metric (consumers are expected to report,
	// but not interpret, prefixes).
	Unit *string `protobuf:"bytes,3,req,name=unit" json:"unit,omitempty"`
}

func (x *ValueMetric) Reset() {
	*x = ValueMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dropsonde_protocol_events_metric_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueMetric) ProtoMessage() {}

func (x *ValueMetric) ProtoReflect() protoreflect.Message {
	mi := &file_dropsonde_protocol_events_metric_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueMetric.ProtoReflect.Descriptor instead.
func (*ValueMetric) Descriptor() ([]byte, []int) {
	return file_dropsonde_protocol_events_metric_proto_rawDescGZIP(), []int{0}
}

func (x *ValueMetric) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ValueMetric) GetValue() float64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *ValueMetric) GetUnit() string {
	if x != nil && x.Unit != nil {
		return *x.Unit
	}
	return ""
}

// A CounterEvent represents the increment of a counter. It contains only the
// change in the value; it is the responsibility of downstream consumers to
// maintain the value of the counter.
type CounterEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the counter. Must be consistent for downstream consumers to
	// associate events semantically.
	Name *string `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	// Amount by which to increment the counter.
	Delta *uint64 `protobuf:"varint,2,req,name=delta" json:"delta,omitempty"`
	// Total value of the counter. This will be overridden by Metron, which
	// internally tracks the total of each named Counter it receives.
	Total *uint64 `protobuf:"varint,3,opt,name=total" json:"total,omitempty"`
}

func (x *CounterEvent) Reset() {
	*x = CounterEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dropsonde_protocol_events_metric_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CounterEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CounterEvent) ProtoMessage() {}

func (x *CounterEvent) ProtoReflect() protoreflect.Message {
	mi := &file_dropsonde_protocol_events_metric_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CounterEvent.ProtoReflect.Descriptor instead.
func (*CounterEvent) Descriptor() ([]byte, []int) {
	return file_dropsonde_protocol_events_metric_proto_rawDescGZIP(), []int{1}
}

func (x *CounterEvent) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CounterEvent) GetDelta() uint64 {
	if x != nil && x.Delta != nil {
		return *x.Delta
	}
	return 0
}

func (x *CounterEvent) GetTotal() uint64 {
	if x != nil && x.Total != nil {
		return *x.Total
	}
	return 0
}

// A ContainerMetric records resource usage of an app in a container.
type ContainerMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the contained application.
	ApplicationId *string `protobuf:"bytes,1,req,name=applicationId" json:"applicationId,omitempty"`
	// Instance index of the contained application. (This, with applicationId,
	// should uniquely identify a container.)
	InstanceIndex *int32 `protobuf:"varint,2,req,name=instanceIndex" json:"instanceIndex,omitempty"`
	// CPU based on number of cores.
	CpuPercentage *float64 `protobuf:"fixed64,3,req,name=cpuPercentage" json:"cpuPercentage,omitempty"`
	// Bytes of memory used.
	MemoryBytes *uint64 `protobuf:"varint,4,req,name=memoryBytes" json:"memoryBytes,omitempty"`
	// Bytes of disk used.
	DiskBytes *uint64 `protobuf:"varint,5,req,name=diskBytes" json:"diskBytes,omitempty"`
	// Maximum bytes of memory allocated to container.
	MemoryBytesQuota *uint64 `protobuf:"varint,6,opt,name=memoryBytesQuota" json:"memoryBytesQuota,omitempty"`
	// Maximum bytes of disk allocated to container.
	DiskBytesQuota *uint64 `protobuf:"varint,7,opt,name=diskBytesQuota" json:"diskBytesQuota,omitempty"`
}

func (x *ContainerMetric) Reset() {
	*x = ContainerMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dropsonde_protocol_events_metric_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerMetric) ProtoMessage() {}

func (x *ContainerMetric) ProtoReflect() protoreflect.Message {
	mi := &file_dropsonde_protocol_events_metric_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerMetric.ProtoReflect.Descriptor instead.
func (*ContainerMetric) Descriptor() ([]byte, []int) {
	return file_dropsonde_protocol_events_metric_proto_rawDescGZIP(), []int{2}
}

func (x *ContainerMetric) GetApplicationId() string {
	if x != nil && x.ApplicationId != nil {
		return *x.ApplicationId
	}
	return ""
}

func (x *ContainerMetric) GetInstanceIndex() int32 {
	if x != nil && x.InstanceIndex != nil {
		return *x.InstanceIndex
	}
	return 0
}

func (x *ContainerMetric) GetCpuPercentage() float64 {
	if x != nil && x.CpuPercentage != nil {
		return *x.CpuPercentage
	}
	return 0
}

func (x *ContainerMetric) GetMemoryBytes() uint64 {
	if x != nil && x.MemoryBytes != nil {
		return *x.MemoryBytes
	}
	return 0
}

func (x *ContainerMetric) GetDiskBytes() uint64 {
	if x != nil && x.DiskBytes != nil {
		return *x.DiskBytes
	}
	return 0
}

func (x *ContainerMetric) GetMemoryBytesQuota() uint64 {
	if x != nil && x.MemoryBytesQuota != nil {
		return *x.MemoryBytesQuota
	}
	return 0
}

func (x *ContainerMetric) GetDiskBytesQuota() uint64 {
	if x != nil && x.DiskBytesQuota != nil {
		return *x.DiskBytesQuota
	}
	return 0
}

var File_dropsonde_protocol_events_metric_proto protoreflect.FileDescriptor

var file_dropsonde_protocol_events_metric_proto_rawDesc = []byte{
	0x0a, 0x26, 0x64, 0x72, 0x6f, 0x70, 0x73, 0x6f, 0x6e, 0x64, 0x65, 0x2d, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x22, 0x4b, 0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69,
	0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x22, 0x4e, 0x0a,
	0x0c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x02, 0x20, 0x02, 0x28, 0x04,
	0x52, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x97, 0x02,
	0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0d,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x24, 0x0a,
	0x0d, 0x63, 0x70, 0x75, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x02, 0x28, 0x01, 0x52, 0x0d, 0x63, 0x70, 0x75, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x02, 0x28, 0x04, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x6b, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x02, 0x28, 0x04, 0x52, 0x09, 0x64, 0x69, 0x73, 0x6b, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x74, 0x65, 0x73, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12,
	0x26, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x6b, 0x42, 0x79, 0x74, 0x65, 0x73, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x6b, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x42, 0x5b, 0x0a, 0x21, 0x6f, 0x72, 0x67, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x72, 0x79, 0x2e, 0x64, 0x72, 0x6f, 0x70,
	0x73, 0x6f, 0x6e, 0x64, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x0d, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5a, 0x27, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x6f, 0x75,
	0x6e, 0x64, 0x72, 0x79, 0x2f, 0x73, 0x6f, 0x6e, 0x64, 0x65, 0x2d, 0x67, 0x6f, 0x2f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73,
}

var (
	file_dropsonde_protocol_events_metric_proto_rawDescOnce sync.Once
	file_dropsonde_protocol_events_metric_proto_rawDescData = file_dropsonde_protocol_events_metric_proto_rawDesc
)

func file_dropsonde_protocol_events_metric_proto_rawDescGZIP() []byte {
	file_dropsonde_protocol_events_metric_proto_rawDescOnce.Do(func() {
		file_dropsonde_protocol_events_metric_proto_rawDescData = protoimpl.X.CompressGZIP(file_dropsonde_protocol_events_metric_proto_rawDescData)
	})
	return file_dropsonde_protocol_events_metric_proto_rawDescData
}

var file_dropsonde_protocol_events_metric_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_dropsonde_protocol_events_metric_proto_goTypes = []interface{}{
	(*ValueMetric)(nil),     // 0: events.ValueMetric
	(*CounterEvent)(nil),    // 1: events.CounterEvent
	(*ContainerMetric)(nil), // 2: events.ContainerMetric
}
var file_dropsonde_protocol_events_metric_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_dropsonde_protocol_events_metric_proto_init() }
func file_dropsonde_protocol_events_metric_proto_init() {
	if File_dropsonde_protocol_events_metric_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dropsonde_protocol_events_metric_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dropsonde_protocol_events_metric_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CounterEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dropsonde_protocol_events_metric_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dropsonde_protocol_events_metric_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dropsonde_protocol_events_metric_proto_goTypes,
		DependencyIndexes: file_dropsonde_protocol_events_metric_proto_depIdxs,
		MessageInfos:      file_dropsonde_protocol_events_metric_proto_msgTypes,
	}.Build()
	File_dropsonde_protocol_events_metric_proto = out.File
	file_dropsonde_protocol_events_metric_proto_rawDesc = nil
	file_dropsonde_protocol_events_metric_proto_goTypes = nil
	file_dropsonde_protocol_events_metric_proto_depIdxs = nil
}
