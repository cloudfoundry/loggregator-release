// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.12
// source: dropsonde-protocol/events/envelope.proto

package events

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Type of the wrapped event.
type Envelope_EventType int32

const (
	Envelope_HttpStartStop   Envelope_EventType = 4
	Envelope_LogMessage      Envelope_EventType = 5
	Envelope_ValueMetric     Envelope_EventType = 6
	Envelope_CounterEvent    Envelope_EventType = 7
	Envelope_Error           Envelope_EventType = 8
	Envelope_ContainerMetric Envelope_EventType = 9
)

// Enum value maps for Envelope_EventType.
var (
	Envelope_EventType_name = map[int32]string{
		4: "HttpStartStop",
		5: "LogMessage",
		6: "ValueMetric",
		7: "CounterEvent",
		8: "Error",
		9: "ContainerMetric",
	}
	Envelope_EventType_value = map[string]int32{
		"HttpStartStop":   4,
		"LogMessage":      5,
		"ValueMetric":     6,
		"CounterEvent":    7,
		"Error":           8,
		"ContainerMetric": 9,
	}
)

func (x Envelope_EventType) Enum() *Envelope_EventType {
	p := new(Envelope_EventType)
	*p = x
	return p
}

func (x Envelope_EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Envelope_EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_dropsonde_protocol_events_envelope_proto_enumTypes[0].Descriptor()
}

func (Envelope_EventType) Type() protoreflect.EnumType {
	return &file_dropsonde_protocol_events_envelope_proto_enumTypes[0]
}

func (x Envelope_EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Envelope_EventType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Envelope_EventType(num)
	return nil
}

// Deprecated: Use Envelope_EventType.Descriptor instead.
func (Envelope_EventType) EnumDescriptor() ([]byte, []int) {
	return file_dropsonde_protocol_events_envelope_proto_rawDescGZIP(), []int{0, 0}
}

// Envelope wraps an Event and adds metadata.
type Envelope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique description of the origin of this event.
	Origin *string `protobuf:"bytes,1,req,name=origin" json:"origin,omitempty"`
	// Type of wrapped event. Only the optional field corresponding to the
	// value of eventType should be set.
	EventType *Envelope_EventType `protobuf:"varint,2,req,name=eventType,enum=events.Envelope_EventType" json:"eventType,omitempty"`
	// UNIX timestamp (in nanoseconds) event was wrapped in this Envelope.
	Timestamp *int64 `protobuf:"varint,6,opt,name=timestamp" json:"timestamp,omitempty"`
	// Deployment name (used to uniquely identify source).
	Deployment *string `protobuf:"bytes,13,opt,name=deployment" json:"deployment,omitempty"`
	// Job name (used to uniquely identify source).
	Job *string `protobuf:"bytes,14,opt,name=job" json:"job,omitempty"`
	// Index of job (used to uniquely identify source).
	Index *string `protobuf:"bytes,15,opt,name=index" json:"index,omitempty"`
	// IP address (used to uniquely identify source).
	Ip *string `protobuf:"bytes,16,opt,name=ip" json:"ip,omitempty"`
	// key/value tags to include additional identifying information.
	Tags            map[string]string `protobuf:"bytes,17,rep,name=tags" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	HttpStartStop   *HttpStartStop    `protobuf:"bytes,7,opt,name=httpStartStop" json:"httpStartStop,omitempty"`
	LogMessage      *LogMessage       `protobuf:"bytes,8,opt,name=logMessage" json:"logMessage,omitempty"`
	ValueMetric     *ValueMetric      `protobuf:"bytes,9,opt,name=valueMetric" json:"valueMetric,omitempty"`
	CounterEvent    *CounterEvent     `protobuf:"bytes,10,opt,name=counterEvent" json:"counterEvent,omitempty"`
	Error           *Error            `protobuf:"bytes,11,opt,name=error" json:"error,omitempty"`
	ContainerMetric *ContainerMetric  `protobuf:"bytes,12,opt,name=containerMetric" json:"containerMetric,omitempty"`
}

func (x *Envelope) Reset() {
	*x = Envelope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dropsonde_protocol_events_envelope_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Envelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Envelope) ProtoMessage() {}

func (x *Envelope) ProtoReflect() protoreflect.Message {
	mi := &file_dropsonde_protocol_events_envelope_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Envelope.ProtoReflect.Descriptor instead.
func (*Envelope) Descriptor() ([]byte, []int) {
	return file_dropsonde_protocol_events_envelope_proto_rawDescGZIP(), []int{0}
}

func (x *Envelope) GetOrigin() string {
	if x != nil && x.Origin != nil {
		return *x.Origin
	}
	return ""
}

func (x *Envelope) GetEventType() Envelope_EventType {
	if x != nil && x.EventType != nil {
		return *x.EventType
	}
	return Envelope_HttpStartStop
}

func (x *Envelope) GetTimestamp() int64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *Envelope) GetDeployment() string {
	if x != nil && x.Deployment != nil {
		return *x.Deployment
	}
	return ""
}

func (x *Envelope) GetJob() string {
	if x != nil && x.Job != nil {
		return *x.Job
	}
	return ""
}

func (x *Envelope) GetIndex() string {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return ""
}

func (x *Envelope) GetIp() string {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return ""
}

func (x *Envelope) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Envelope) GetHttpStartStop() *HttpStartStop {
	if x != nil {
		return x.HttpStartStop
	}
	return nil
}

func (x *Envelope) GetLogMessage() *LogMessage {
	if x != nil {
		return x.LogMessage
	}
	return nil
}

func (x *Envelope) GetValueMetric() *ValueMetric {
	if x != nil {
		return x.ValueMetric
	}
	return nil
}

func (x *Envelope) GetCounterEvent() *CounterEvent {
	if x != nil {
		return x.CounterEvent
	}
	return nil
}

func (x *Envelope) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *Envelope) GetContainerMetric() *ContainerMetric {
	if x != nil {
		return x.ContainerMetric
	}
	return nil
}

var File_dropsonde_protocol_events_envelope_proto protoreflect.FileDescriptor

var file_dropsonde_protocol_events_envelope_proto_rawDesc = []byte{
	0x0a, 0x28, 0x64, 0x72, 0x6f, 0x70, 0x73, 0x6f, 0x6e, 0x64, 0x65, 0x2d, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x65, 0x6e, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x1a, 0x24, 0x64, 0x72, 0x6f, 0x70, 0x73, 0x6f, 0x6e, 0x64, 0x65, 0x2d, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x68, 0x74,
	0x74, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x64, 0x72, 0x6f, 0x70, 0x73, 0x6f,
	0x6e, 0x64, 0x65, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x64,
	0x72, 0x6f, 0x70, 0x73, 0x6f, 0x6e, 0x64, 0x65, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x64, 0x72, 0x6f, 0x70, 0x73, 0x6f, 0x6e, 0x64, 0x65,
	0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc5, 0x06, 0x0a,
	0x08, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x12, 0x38, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x45, 0x6e,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6a, 0x6f, 0x62,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x70, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x12, 0x3b, 0x0a, 0x0d, 0x68, 0x74, 0x74, 0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x74,
	0x6f, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x52,
	0x0d, 0x68, 0x74, 0x74, 0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x32,
	0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x4c, 0x6f, 0x67, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0a, 0x6c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x35, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x0b, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x38, 0x0a, 0x0c, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x41, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x1a, 0x37, 0x0a, 0x09, 0x54,
	0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x97, 0x01, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x48, 0x74, 0x74, 0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53,
	0x74, 0x6f, 0x70, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x07, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x10, 0x08, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x10, 0x09, 0x22, 0x04, 0x08, 0x01, 0x10, 0x03, 0x2a, 0x09,
	0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x2a, 0x09, 0x48, 0x74, 0x74, 0x70, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x2a, 0x08, 0x48, 0x74, 0x74, 0x70, 0x53, 0x74, 0x6f, 0x70, 0x4a, 0x04,
	0x08, 0x03, 0x10, 0x06, 0x52, 0x09, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52,
	0x09, 0x48, 0x74, 0x74, 0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x08, 0x48, 0x74, 0x74, 0x70,
	0x53, 0x74, 0x6f, 0x70, 0x42, 0x5a, 0x0a, 0x21, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x72, 0x79, 0x2e, 0x64, 0x72, 0x6f, 0x70, 0x73, 0x6f, 0x6e,
	0x64, 0x65, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5a, 0x27, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x72, 0x79,
	0x2f, 0x73, 0x6f, 0x6e, 0x64, 0x65, 0x2d, 0x67, 0x6f, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
}

var (
	file_dropsonde_protocol_events_envelope_proto_rawDescOnce sync.Once
	file_dropsonde_protocol_events_envelope_proto_rawDescData = file_dropsonde_protocol_events_envelope_proto_rawDesc
)

func file_dropsonde_protocol_events_envelope_proto_rawDescGZIP() []byte {
	file_dropsonde_protocol_events_envelope_proto_rawDescOnce.Do(func() {
		file_dropsonde_protocol_events_envelope_proto_rawDescData = protoimpl.X.CompressGZIP(file_dropsonde_protocol_events_envelope_proto_rawDescData)
	})
	return file_dropsonde_protocol_events_envelope_proto_rawDescData
}

var file_dropsonde_protocol_events_envelope_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_dropsonde_protocol_events_envelope_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_dropsonde_protocol_events_envelope_proto_goTypes = []interface{}{
	(Envelope_EventType)(0), // 0: events.Envelope.EventType
	(*Envelope)(nil),        // 1: events.Envelope
	nil,                     // 2: events.Envelope.TagsEntry
	(*HttpStartStop)(nil),   // 3: events.HttpStartStop
	(*LogMessage)(nil),      // 4: events.LogMessage
	(*ValueMetric)(nil),     // 5: events.ValueMetric
	(*CounterEvent)(nil),    // 6: events.CounterEvent
	(*Error)(nil),           // 7: events.Error
	(*ContainerMetric)(nil), // 8: events.ContainerMetric
}
var file_dropsonde_protocol_events_envelope_proto_depIdxs = []int32{
	0, // 0: events.Envelope.eventType:type_name -> events.Envelope.EventType
	2, // 1: events.Envelope.tags:type_name -> events.Envelope.TagsEntry
	3, // 2: events.Envelope.httpStartStop:type_name -> events.HttpStartStop
	4, // 3: events.Envelope.logMessage:type_name -> events.LogMessage
	5, // 4: events.Envelope.valueMetric:type_name -> events.ValueMetric
	6, // 5: events.Envelope.counterEvent:type_name -> events.CounterEvent
	7, // 6: events.Envelope.error:type_name -> events.Error
	8, // 7: events.Envelope.containerMetric:type_name -> events.ContainerMetric
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_dropsonde_protocol_events_envelope_proto_init() }
func file_dropsonde_protocol_events_envelope_proto_init() {
	if File_dropsonde_protocol_events_envelope_proto != nil {
		return
	}
	file_dropsonde_protocol_events_http_proto_init()
	file_dropsonde_protocol_events_log_proto_init()
	file_dropsonde_protocol_events_metric_proto_init()
	file_dropsonde_protocol_events_error_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_dropsonde_protocol_events_envelope_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Envelope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dropsonde_protocol_events_envelope_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dropsonde_protocol_events_envelope_proto_goTypes,
		DependencyIndexes: file_dropsonde_protocol_events_envelope_proto_depIdxs,
		EnumInfos:         file_dropsonde_protocol_events_envelope_proto_enumTypes,
		MessageInfos:      file_dropsonde_protocol_events_envelope_proto_msgTypes,
	}.Build()
	File_dropsonde_protocol_events_envelope_proto = out.File
	file_dropsonde_protocol_events_envelope_proto_rawDesc = nil
	file_dropsonde_protocol_events_envelope_proto_goTypes = nil
	file_dropsonde_protocol_events_envelope_proto_depIdxs = nil
}
