// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package events

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson692db02bDecodeGithubComCloudfoundrySondeGoEvents(in *jlexer.Lexer, out *ValueMetric) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "value":
			if in.IsNull() {
				in.Skip()
				out.Value = nil
			} else {
				if out.Value == nil {
					out.Value = new(float64)
				}
				*out.Value = float64(in.Float64())
			}
		case "unit":
			if in.IsNull() {
				in.Skip()
				out.Unit = nil
			} else {
				if out.Unit == nil {
					out.Unit = new(string)
				}
				*out.Unit = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGithubComCloudfoundrySondeGoEvents(out *jwriter.Writer, in ValueMetric) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != nil {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(*in.Name))
	}
	if in.Value != nil {
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(*in.Value))
	}
	if in.Unit != nil {
		const prefix string = ",\"unit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Unit))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ValueMetric) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson692db02bEncodeGithubComCloudfoundrySondeGoEvents(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ValueMetric) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson692db02bDecodeGithubComCloudfoundrySondeGoEvents(l, v)
}
func easyjson692db02bDecodeGithubComCloudfoundrySondeGoEvents1(in *jlexer.Lexer, out *UUID) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "low":
			if in.IsNull() {
				in.Skip()
				out.Low = nil
			} else {
				if out.Low == nil {
					out.Low = new(uint64)
				}
				*out.Low = uint64(in.Uint64())
			}
		case "high":
			if in.IsNull() {
				in.Skip()
				out.High = nil
			} else {
				if out.High == nil {
					out.High = new(uint64)
				}
				*out.High = uint64(in.Uint64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGithubComCloudfoundrySondeGoEvents1(out *jwriter.Writer, in UUID) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Low != nil {
		const prefix string = ",\"low\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint64(uint64(*in.Low))
	}
	if in.High != nil {
		const prefix string = ",\"high\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(*in.High))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UUID) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson692db02bEncodeGithubComCloudfoundrySondeGoEvents1(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UUID) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson692db02bDecodeGithubComCloudfoundrySondeGoEvents1(l, v)
}
func easyjson692db02bDecodeGithubComCloudfoundrySondeGoEvents2(in *jlexer.Lexer, out *LogMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "message":
			if in.IsNull() {
				in.Skip()
				out.Message = nil
			} else {
				out.Message = in.Bytes()
			}
		case "message_type":
			if in.IsNull() {
				in.Skip()
				out.MessageType = nil
			} else {
				if out.MessageType == nil {
					out.MessageType = new(LogMessage_MessageType)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.MessageType).UnmarshalJSON(data))
				}
			}
		case "timestamp":
			if in.IsNull() {
				in.Skip()
				out.Timestamp = nil
			} else {
				if out.Timestamp == nil {
					out.Timestamp = new(int64)
				}
				*out.Timestamp = int64(in.Int64())
			}
		case "app_id":
			if in.IsNull() {
				in.Skip()
				out.AppId = nil
			} else {
				if out.AppId == nil {
					out.AppId = new(string)
				}
				*out.AppId = string(in.String())
			}
		case "source_type":
			if in.IsNull() {
				in.Skip()
				out.SourceType = nil
			} else {
				if out.SourceType == nil {
					out.SourceType = new(string)
				}
				*out.SourceType = string(in.String())
			}
		case "source_instance":
			if in.IsNull() {
				in.Skip()
				out.SourceInstance = nil
			} else {
				if out.SourceInstance == nil {
					out.SourceInstance = new(string)
				}
				*out.SourceInstance = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGithubComCloudfoundrySondeGoEvents2(out *jwriter.Writer, in LogMessage) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Message) != 0 {
		const prefix string = ",\"message\":"
		first = false
		out.RawString(prefix[1:])
		out.Base64Bytes(in.Message)
	}
	if in.MessageType != nil {
		const prefix string = ",\"message_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.MessageType))
	}
	if in.Timestamp != nil {
		const prefix string = ",\"timestamp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Timestamp))
	}
	if in.AppId != nil {
		const prefix string = ",\"app_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AppId))
	}
	if in.SourceType != nil {
		const prefix string = ",\"source_type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.SourceType))
	}
	if in.SourceInstance != nil {
		const prefix string = ",\"source_instance\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.SourceInstance))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LogMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson692db02bEncodeGithubComCloudfoundrySondeGoEvents2(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LogMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson692db02bDecodeGithubComCloudfoundrySondeGoEvents2(l, v)
}
func easyjson692db02bDecodeGithubComCloudfoundrySondeGoEvents3(in *jlexer.Lexer, out *HttpStartStop) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "startTimestamp":
			if in.IsNull() {
				in.Skip()
				out.StartTimestamp = nil
			} else {
				if out.StartTimestamp == nil {
					out.StartTimestamp = new(int64)
				}
				*out.StartTimestamp = int64(in.Int64())
			}
		case "stopTimestamp":
			if in.IsNull() {
				in.Skip()
				out.StopTimestamp = nil
			} else {
				if out.StopTimestamp == nil {
					out.StopTimestamp = new(int64)
				}
				*out.StopTimestamp = int64(in.Int64())
			}
		case "requestId":
			if in.IsNull() {
				in.Skip()
				out.RequestId = nil
			} else {
				if out.RequestId == nil {
					out.RequestId = new(UUID)
				}
				(*out.RequestId).UnmarshalEasyJSON(in)
			}
		case "peerType":
			if in.IsNull() {
				in.Skip()
				out.PeerType = nil
			} else {
				if out.PeerType == nil {
					out.PeerType = new(PeerType)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.PeerType).UnmarshalJSON(data))
				}
			}
		case "method":
			if in.IsNull() {
				in.Skip()
				out.Method = nil
			} else {
				if out.Method == nil {
					out.Method = new(Method)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Method).UnmarshalJSON(data))
				}
			}
		case "uri":
			if in.IsNull() {
				in.Skip()
				out.Uri = nil
			} else {
				if out.Uri == nil {
					out.Uri = new(string)
				}
				*out.Uri = string(in.String())
			}
		case "remoteAddress":
			if in.IsNull() {
				in.Skip()
				out.RemoteAddress = nil
			} else {
				if out.RemoteAddress == nil {
					out.RemoteAddress = new(string)
				}
				*out.RemoteAddress = string(in.String())
			}
		case "userAgent":
			if in.IsNull() {
				in.Skip()
				out.UserAgent = nil
			} else {
				if out.UserAgent == nil {
					out.UserAgent = new(string)
				}
				*out.UserAgent = string(in.String())
			}
		case "statusCode":
			if in.IsNull() {
				in.Skip()
				out.StatusCode = nil
			} else {
				if out.StatusCode == nil {
					out.StatusCode = new(int32)
				}
				*out.StatusCode = int32(in.Int32())
			}
		case "contentLength":
			if in.IsNull() {
				in.Skip()
				out.ContentLength = nil
			} else {
				if out.ContentLength == nil {
					out.ContentLength = new(int64)
				}
				*out.ContentLength = int64(in.Int64())
			}
		case "applicationId":
			if in.IsNull() {
				in.Skip()
				out.ApplicationId = nil
			} else {
				if out.ApplicationId == nil {
					out.ApplicationId = new(UUID)
				}
				(*out.ApplicationId).UnmarshalEasyJSON(in)
			}
		case "instanceIndex":
			if in.IsNull() {
				in.Skip()
				out.InstanceIndex = nil
			} else {
				if out.InstanceIndex == nil {
					out.InstanceIndex = new(int32)
				}
				*out.InstanceIndex = int32(in.Int32())
			}
		case "instanceId":
			if in.IsNull() {
				in.Skip()
				out.InstanceId = nil
			} else {
				if out.InstanceId == nil {
					out.InstanceId = new(string)
				}
				*out.InstanceId = string(in.String())
			}
		case "forwarded":
			if in.IsNull() {
				in.Skip()
				out.Forwarded = nil
			} else {
				in.Delim('[')
				if out.Forwarded == nil {
					if !in.IsDelim(']') {
						out.Forwarded = make([]string, 0, 4)
					} else {
						out.Forwarded = []string{}
					}
				} else {
					out.Forwarded = (out.Forwarded)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.Forwarded = append(out.Forwarded, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGithubComCloudfoundrySondeGoEvents3(out *jwriter.Writer, in HttpStartStop) {
	out.RawByte('{')
	first := true
	_ = first
	if in.StartTimestamp != nil {
		const prefix string = ",\"startTimestamp\":"
		first = false
		out.RawString(prefix[1:])
		out.Int64(int64(*in.StartTimestamp))
	}
	if in.StopTimestamp != nil {
		const prefix string = ",\"stopTimestamp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.StopTimestamp))
	}
	if in.RequestId != nil {
		const prefix string = ",\"requestId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.RequestId).MarshalEasyJSON(out)
	}
	if in.PeerType != nil {
		const prefix string = ",\"peerType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.PeerType))
	}
	if in.Method != nil {
		const prefix string = ",\"method\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Method))
	}
	if in.Uri != nil {
		const prefix string = ",\"uri\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Uri))
	}
	if in.RemoteAddress != nil {
		const prefix string = ",\"remoteAddress\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.RemoteAddress))
	}
	if in.UserAgent != nil {
		const prefix string = ",\"userAgent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.UserAgent))
	}
	if in.StatusCode != nil {
		const prefix string = ",\"statusCode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.StatusCode))
	}
	if in.ContentLength != nil {
		const prefix string = ",\"contentLength\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.ContentLength))
	}
	if in.ApplicationId != nil {
		const prefix string = ",\"applicationId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ApplicationId).MarshalEasyJSON(out)
	}
	if in.InstanceIndex != nil {
		const prefix string = ",\"instanceIndex\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.InstanceIndex))
	}
	if in.InstanceId != nil {
		const prefix string = ",\"instanceId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.InstanceId))
	}
	if len(in.Forwarded) != 0 {
		const prefix string = ",\"forwarded\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v5, v6 := range in.Forwarded {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HttpStartStop) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson692db02bEncodeGithubComCloudfoundrySondeGoEvents3(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HttpStartStop) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson692db02bDecodeGithubComCloudfoundrySondeGoEvents3(l, v)
}
func easyjson692db02bDecodeGithubComCloudfoundrySondeGoEvents4(in *jlexer.Lexer, out *Error) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "source":
			if in.IsNull() {
				in.Skip()
				out.Source = nil
			} else {
				if out.Source == nil {
					out.Source = new(string)
				}
				*out.Source = string(in.String())
			}
		case "code":
			if in.IsNull() {
				in.Skip()
				out.Code = nil
			} else {
				if out.Code == nil {
					out.Code = new(int32)
				}
				*out.Code = int32(in.Int32())
			}
		case "message":
			if in.IsNull() {
				in.Skip()
				out.Message = nil
			} else {
				if out.Message == nil {
					out.Message = new(string)
				}
				*out.Message = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGithubComCloudfoundrySondeGoEvents4(out *jwriter.Writer, in Error) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Source != nil {
		const prefix string = ",\"source\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(*in.Source))
	}
	if in.Code != nil {
		const prefix string = ",\"code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Code))
	}
	if in.Message != nil {
		const prefix string = ",\"message\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Message))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Error) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson692db02bEncodeGithubComCloudfoundrySondeGoEvents4(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Error) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson692db02bDecodeGithubComCloudfoundrySondeGoEvents4(l, v)
}
func easyjson692db02bDecodeGithubComCloudfoundrySondeGoEvents5(in *jlexer.Lexer, out *Envelope) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "origin":
			if in.IsNull() {
				in.Skip()
				out.Origin = nil
			} else {
				if out.Origin == nil {
					out.Origin = new(string)
				}
				*out.Origin = string(in.String())
			}
		case "eventType":
			if in.IsNull() {
				in.Skip()
				out.EventType = nil
			} else {
				if out.EventType == nil {
					out.EventType = new(Envelope_EventType)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.EventType).UnmarshalJSON(data))
				}
			}
		case "timestamp":
			if in.IsNull() {
				in.Skip()
				out.Timestamp = nil
			} else {
				if out.Timestamp == nil {
					out.Timestamp = new(int64)
				}
				*out.Timestamp = int64(in.Int64())
			}
		case "deployment":
			if in.IsNull() {
				in.Skip()
				out.Deployment = nil
			} else {
				if out.Deployment == nil {
					out.Deployment = new(string)
				}
				*out.Deployment = string(in.String())
			}
		case "job":
			if in.IsNull() {
				in.Skip()
				out.Job = nil
			} else {
				if out.Job == nil {
					out.Job = new(string)
				}
				*out.Job = string(in.String())
			}
		case "index":
			if in.IsNull() {
				in.Skip()
				out.Index = nil
			} else {
				if out.Index == nil {
					out.Index = new(string)
				}
				*out.Index = string(in.String())
			}
		case "ip":
			if in.IsNull() {
				in.Skip()
				out.Ip = nil
			} else {
				if out.Ip == nil {
					out.Ip = new(string)
				}
				*out.Ip = string(in.String())
			}
		case "tags":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Tags = make(map[string]string)
				} else {
					out.Tags = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v7 string
					v7 = string(in.String())
					(out.Tags)[key] = v7
					in.WantComma()
				}
				in.Delim('}')
			}
		case "httpStartStop":
			if in.IsNull() {
				in.Skip()
				out.HttpStartStop = nil
			} else {
				if out.HttpStartStop == nil {
					out.HttpStartStop = new(HttpStartStop)
				}
				(*out.HttpStartStop).UnmarshalEasyJSON(in)
			}
		case "logMessage":
			if in.IsNull() {
				in.Skip()
				out.LogMessage = nil
			} else {
				if out.LogMessage == nil {
					out.LogMessage = new(LogMessage)
				}
				(*out.LogMessage).UnmarshalEasyJSON(in)
			}
		case "valueMetric":
			if in.IsNull() {
				in.Skip()
				out.ValueMetric = nil
			} else {
				if out.ValueMetric == nil {
					out.ValueMetric = new(ValueMetric)
				}
				(*out.ValueMetric).UnmarshalEasyJSON(in)
			}
		case "counterEvent":
			if in.IsNull() {
				in.Skip()
				out.CounterEvent = nil
			} else {
				if out.CounterEvent == nil {
					out.CounterEvent = new(CounterEvent)
				}
				(*out.CounterEvent).UnmarshalEasyJSON(in)
			}
		case "error":
			if in.IsNull() {
				in.Skip()
				out.Error = nil
			} else {
				if out.Error == nil {
					out.Error = new(Error)
				}
				(*out.Error).UnmarshalEasyJSON(in)
			}
		case "containerMetric":
			if in.IsNull() {
				in.Skip()
				out.ContainerMetric = nil
			} else {
				if out.ContainerMetric == nil {
					out.ContainerMetric = new(ContainerMetric)
				}
				(*out.ContainerMetric).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGithubComCloudfoundrySondeGoEvents5(out *jwriter.Writer, in Envelope) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Origin != nil {
		const prefix string = ",\"origin\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(*in.Origin))
	}
	if in.EventType != nil {
		const prefix string = ",\"eventType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.EventType))
	}
	if in.Timestamp != nil {
		const prefix string = ",\"timestamp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Timestamp))
	}
	if in.Deployment != nil {
		const prefix string = ",\"deployment\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Deployment))
	}
	if in.Job != nil {
		const prefix string = ",\"job\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Job))
	}
	if in.Index != nil {
		const prefix string = ",\"index\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Index))
	}
	if in.Ip != nil {
		const prefix string = ",\"ip\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Ip))
	}
	if len(in.Tags) != 0 {
		const prefix string = ",\"tags\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v8First := true
			for v8Name, v8Value := range in.Tags {
				if v8First {
					v8First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v8Name))
				out.RawByte(':')
				out.String(string(v8Value))
			}
			out.RawByte('}')
		}
	}
	if in.HttpStartStop != nil {
		const prefix string = ",\"httpStartStop\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.HttpStartStop).MarshalEasyJSON(out)
	}
	if in.LogMessage != nil {
		const prefix string = ",\"logMessage\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.LogMessage).MarshalEasyJSON(out)
	}
	if in.ValueMetric != nil {
		const prefix string = ",\"valueMetric\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ValueMetric).MarshalEasyJSON(out)
	}
	if in.CounterEvent != nil {
		const prefix string = ",\"counterEvent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.CounterEvent).MarshalEasyJSON(out)
	}
	if in.Error != nil {
		const prefix string = ",\"error\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Error).MarshalEasyJSON(out)
	}
	if in.ContainerMetric != nil {
		const prefix string = ",\"containerMetric\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ContainerMetric).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Envelope) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson692db02bEncodeGithubComCloudfoundrySondeGoEvents5(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Envelope) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson692db02bDecodeGithubComCloudfoundrySondeGoEvents5(l, v)
}
func easyjson692db02bDecodeGithubComCloudfoundrySondeGoEvents6(in *jlexer.Lexer, out *CounterEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "delta":
			if in.IsNull() {
				in.Skip()
				out.Delta = nil
			} else {
				if out.Delta == nil {
					out.Delta = new(uint64)
				}
				*out.Delta = uint64(in.Uint64())
			}
		case "total":
			if in.IsNull() {
				in.Skip()
				out.Total = nil
			} else {
				if out.Total == nil {
					out.Total = new(uint64)
				}
				*out.Total = uint64(in.Uint64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGithubComCloudfoundrySondeGoEvents6(out *jwriter.Writer, in CounterEvent) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != nil {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(*in.Name))
	}
	if in.Delta != nil {
		const prefix string = ",\"delta\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(*in.Delta))
	}
	if in.Total != nil {
		const prefix string = ",\"total\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(*in.Total))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CounterEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson692db02bEncodeGithubComCloudfoundrySondeGoEvents6(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CounterEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson692db02bDecodeGithubComCloudfoundrySondeGoEvents6(l, v)
}
func easyjson692db02bDecodeGithubComCloudfoundrySondeGoEvents7(in *jlexer.Lexer, out *ContainerMetric) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "applicationId":
			if in.IsNull() {
				in.Skip()
				out.ApplicationId = nil
			} else {
				if out.ApplicationId == nil {
					out.ApplicationId = new(string)
				}
				*out.ApplicationId = string(in.String())
			}
		case "instanceIndex":
			if in.IsNull() {
				in.Skip()
				out.InstanceIndex = nil
			} else {
				if out.InstanceIndex == nil {
					out.InstanceIndex = new(int32)
				}
				*out.InstanceIndex = int32(in.Int32())
			}
		case "cpuPercentage":
			if in.IsNull() {
				in.Skip()
				out.CpuPercentage = nil
			} else {
				if out.CpuPercentage == nil {
					out.CpuPercentage = new(float64)
				}
				*out.CpuPercentage = float64(in.Float64())
			}
		case "memoryBytes":
			if in.IsNull() {
				in.Skip()
				out.MemoryBytes = nil
			} else {
				if out.MemoryBytes == nil {
					out.MemoryBytes = new(uint64)
				}
				*out.MemoryBytes = uint64(in.Uint64())
			}
		case "diskBytes":
			if in.IsNull() {
				in.Skip()
				out.DiskBytes = nil
			} else {
				if out.DiskBytes == nil {
					out.DiskBytes = new(uint64)
				}
				*out.DiskBytes = uint64(in.Uint64())
			}
		case "memoryBytesQuota":
			if in.IsNull() {
				in.Skip()
				out.MemoryBytesQuota = nil
			} else {
				if out.MemoryBytesQuota == nil {
					out.MemoryBytesQuota = new(uint64)
				}
				*out.MemoryBytesQuota = uint64(in.Uint64())
			}
		case "diskBytesQuota":
			if in.IsNull() {
				in.Skip()
				out.DiskBytesQuota = nil
			} else {
				if out.DiskBytesQuota == nil {
					out.DiskBytesQuota = new(uint64)
				}
				*out.DiskBytesQuota = uint64(in.Uint64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson692db02bEncodeGithubComCloudfoundrySondeGoEvents7(out *jwriter.Writer, in ContainerMetric) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ApplicationId != nil {
		const prefix string = ",\"applicationId\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(*in.ApplicationId))
	}
	if in.InstanceIndex != nil {
		const prefix string = ",\"instanceIndex\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.InstanceIndex))
	}
	if in.CpuPercentage != nil {
		const prefix string = ",\"cpuPercentage\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(*in.CpuPercentage))
	}
	if in.MemoryBytes != nil {
		const prefix string = ",\"memoryBytes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(*in.MemoryBytes))
	}
	if in.DiskBytes != nil {
		const prefix string = ",\"diskBytes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(*in.DiskBytes))
	}
	if in.MemoryBytesQuota != nil {
		const prefix string = ",\"memoryBytesQuota\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(*in.MemoryBytesQuota))
	}
	if in.DiskBytesQuota != nil {
		const prefix string = ",\"diskBytesQuota\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(*in.DiskBytesQuota))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ContainerMetric) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson692db02bEncodeGithubComCloudfoundrySondeGoEvents7(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ContainerMetric) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson692db02bDecodeGithubComCloudfoundrySondeGoEvents7(l, v)
}
