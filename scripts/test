#!/bin/bash

trap "echo Exited!; exit 1;" SIGINT SIGTERM

PROJECT_DIR="$(cd "$(dirname "$0")/.."; pwd)"

function print_usage {
    echo "usage: test [subcommand] [ginkgo args]"
    echo
    echo -e "\033[1mSubcommands:\033[0m"
    echo "   all         Run all the tests, excluding linters (default)"
    echo "   build       Build all binaries for the project"
    echo "   cleaners    Run tools that clean the code base"
    echo "   unit        Run the unit tests"
    echo "   integration Run the integration tests"
    echo ""
    echo "   linters"
    echo "   install_linters"
}

function print_checkpoint {
    bold_blue "==================================  $@  =================================="
}

function green {
    if [[ -n "$TERM" ]]; then
        echo -e "$(tput setaf 2)$1$(tput sgr0)"
    else
        echo ":) $1"
    fi
}

function red {
    if [[ -n "$TERM" ]]; then
        echo -e "$(tput setaf 1)$1$(tput sgr0)"
    else
        echo ":( $1"
    fi
}

function bold_blue {
    if [[ -n "$TERM" ]]; then
        echo -e "$(tput setaf 6; tput bold)$1$(tput sgr0)"
    else
        echo "$1"
    fi
}

failure_status=0
function check_output {
    eval "$@"
    local status=$?
    if [[ $status -ne 0 ]]
    then
       failure_status=$status
    fi
}

function loggregator_package {
    local not_loggregator_packages=( dea_logging_agent code.cloudfoundry.org github.com golang.org google.golang.org gopkg.in )
    for p in "${not_loggregator_packages[@]}"
    do
        if [[ "$p" == "$1" ]]
        then
            return 1
        fi
    done
    return 0
}

function run_cleaners {
    print_checkpoint "Running Cleaners"
    which goimports > /dev/null || go get golang.org/x/tools/cmd/goimports
    which misspell > /dev/null || go get github.com/client9/misspell/cmd/misspell
    which unconvert > /dev/null || go get github.com/mdempsky/unconvert

    src_dir="$(dirname $(dirname $0))/src"
    for name in $(ls -1 $src_dir)
    do
        dir="$src_dir/$name"
        if [[ ! -d $dir ]]
        then
            continue
        fi
        if loggregator_package $(basename $dir)
        then
            echo cleaning $dir
            goimports -w $dir
            gofmt -s -w $dir
            misspell -w $dir
            unconvert -v -apply $(basename $dir)/...
        fi
    done
    return 0
}

function run_all {
    check_output run_cleaners
    check_output run_build
    check_output run_unit $@
    check_output run_integration $@
    return $failure_status
}

function run_build {
    print_checkpoint "Building Binaries"
    "$(dirname $0)/build"
    return $?
}

function run_unit {
    local not_unit_tests="code.cloudfoundry.org,github.com,golang.org,google.golang.org,gopkg.in,integration_tests,lats"
    print_checkpoint "Running Unit Tests"
    # TODO: remove build_etcd once announcer unit tests no longer depend on it
    build_etcd
    ginkgo -r --race --randomizeAllSpecs --cover --skipPackage="${not_unit_tests}" $@
    return $?
}

function run_integration {
    print_checkpoint "Running Integration Tests"
    build_etcd
    ginkgo -r --race --randomizeAllSpecs --cover $@ src/integration_tests
    return $?
}

function parse_argc {
    command=run_all
    if [[ $# -eq 0 ]]
    then
        return
    fi

    arg=$1
    case "$arg" in
        -h|-help|--help|help)
            print_usage
            exit 0
            ;;
        all|unit|integration|build|cleaners|linters|install_linters)
            command=run_$arg
            ;;
        *)
            echo "Invalid command: $arg\n"
            print_usage
            exit 1
            ;;
    esac
}

function build_etcd {
    echo "building etcd"

    if which etcd > /dev/null
    then
        echo "etcd already present. skip building..."
        return
    fi

    pushd $PROJECT_DIR/src/github.com/coreos/etcd > /dev/null
        ORG_PATH="github.com/coreos"
        REPO_PATH="${ORG_PATH}/etcd"
        export ETCD_GOPATH=${PWD}/gopath

        rm -f $ETCD_GOPATH/src/${REPO_PATH}
        mkdir -p $ETCD_GOPATH/src/${ORG_PATH}
        ln -s ${PWD} $ETCD_GOPATH/src/${REPO_PATH}

        eval $(go env)

        GIT_SHA=`git rev-parse --short HEAD || echo "GitNotFound"`

        # Static compilation is useful when etcd is run in a container
        GOPATH=$ETCD_GOPATH CGO_ENABLED=0 go build -a -installsuffix cgo -ldflags "-s -X ${REPO_PATH}/version.GitSHA=${GIT_SHA}" -o bin/etcd ${REPO_PATH}
        GOPATH=$ETCD_GOPATH CGO_ENABLED=0 go build -a -installsuffix cgo -ldflags "-s" -o bin/etcdctl ${REPO_PATH}/etcdctl
    popd > /dev/null

    mv $PROJECT_DIR/src/github.com/coreos/etcd/bin/etcd $PROJECT_DIR/bin/etcd
}

function run_install_linters {
    go get github.com/tsenart/deadcode
    go get github.com/golang/lint/golint
    go get github.com/opennota/check/cmd/aligncheck
    go get github.com/opennota/check/cmd/structcheck
    go get github.com/opennota/check/cmd/varcheck
    go get github.com/kisielk/errcheck
    go get github.com/gordonklaus/ineffassign
    go get github.com/mvdan/interfacer/cmd/interfacer
    go get honnef.co/go/simple/cmd/gosimple
    go get honnef.co/go/staticcheck/cmd/staticcheck
    go get honnef.co/go/unused/cmd/unused
}

function run_linters {
    print_checkpoint "Running Linters"

    src_dir="$(dirname $(dirname $0))/src"
    for name in $(ls -1 $src_dir)
    do
        dir="$src_dir/$name"
        if [[ ! -d $dir ]]
        then
            continue
        fi
        if loggregator_package $(basename $dir)
        then
            echo cleaning $dir
            goimports -w $dir
            gofmt -s -w $dir
            misspell -w $dir
            unconvert -v -apply

            local pkg="$(basename $dir)/..."
            go vet $pkg
            deadcode $dir
            golint $pkg
            aligncheck $pkg
            structcheck $pkg
            varcheck $pkg
            errcheck $pkg
            ineffassign $dir
            interfacer $pkg
            gosimple $pkg
            staticcheck $pkg
            unused $pkg
        fi
    done
    return 0
}

function setup_env {
    export PATH="$PROJECT_DIR/bin:$PATH"
    export GORACE="halt_on_error=1"
}

function install_ginkgo {
    if which ginkgo > /dev/null
    then
        return
    fi

    go install github.com/onsi/ginkgo/ginkgo
}

function main {
    setup_env
    install_ginkgo
    parse_argc $1
    shift
    "$command" $@
    result=$?
    if [[ $result -eq 0 ]]
    then
        green "SWEET SUITE SUCCESS"
    else
        red "SUITE FAILURE"
    fi
    exit $result
}
main $@
